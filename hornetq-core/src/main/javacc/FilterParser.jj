/*
 * Copyright 2009 Red Hat, Inc.
 *  Red Hat licenses this file to you under the Apache License, version
 *  2.0 (the "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 *  implied.  See the License for the specific language governing
 *  permissions and limitations under the License.
 */ 

options {
   LOOKAHEAD=1;
   UNICODE_INPUT=true;
/*
   DEBUG_PARSER=true;
   DEBUG_LOOKAHEAD=true;
   DEBUG_TOKEN_MANAGER=true;
*/
}

PARSER_BEGIN(FilterParser)
   
package org.hornetq.core.filter.impl;

import java.io.StringReader;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.hornetq.api.core.SimpleString;
import org.hornetq.core.filter.impl.SimpleStringReader;

// CHECKSTYLE:OFF
// NO_UCD
/**
 * A JavaCC 2.0 grammar for HornetQ filters
 *
 * @author Scott.Stark@jboss.org
 * @author adrian@jboss.org
 * @version $Revision: 2681 $
 */
@SuppressWarnings(value = { "unused", "rawtypes", "unchecked" })
public class FilterParser
{
   private static final String LOFFER_L = "l";
   private static final String UPPER_L = "L";
   private static final String OX = "0X";
   private static final String Ox = "0x";
   private static final String ZERRO = "0";

   private Map<SimpleString, Identifier> identifierMap;

   public FilterParser()
   {
      // keep the parser from freaking out, init using one of
      // the JavaCC generated constructor
      this(new StringReader(""));
   }

   public Object parse(SimpleString selector, Map<SimpleString, Identifier> identifierMap)
      throws ParseException
   {
      return parse(selector, identifierMap, false);
   }
   
   public Object parse(SimpleString selector, Map<SimpleString, Identifier> identifierMap, boolean trace)
      throws ParseException
   {
      SimpleStringReader sr = new SimpleStringReader(selector);
      ReInit(sr);

      // This will have no effect unless the debugging options are true      
      if (trace)
      {
         this.enable_tracing();
      }
      else
      {
         this.disable_tracing();
      }

      this.identifierMap = identifierMap;
      return this.expression();
   }

   /**
    * Strip off the leading and trailing (quote) chars from the given string
    * and return it. 
    */
   private SimpleString stripQuotes(String image)
   {
      StringBuffer result = new StringBuffer(image.length()-2);
      int i = 1;
      boolean escaped = false;
      while (i < image.length() - 1)
      {
         if (escaped)
         {
            if (image.charAt(i) == '\'')
               result.append('\'');
            else
               throw new RuntimeException("Invalid uses of quotes: " + image);
            escaped = false;
         }
         else if (image.charAt(i) == '\'')
            escaped = true;
         else
            result.append(image.charAt(i));
         ++i;
      }
      return new SimpleString(result.toString());
   }
   
   public static Object doParse(SimpleString selector, Map<SimpleString, Identifier> identifierMap)
      throws ParseException
   {
      return doParse(selector, identifierMap, false);
   }
   
   public static Object doParse(SimpleString selector, Map<SimpleString, Identifier> identifierMap, boolean trace)
      throws ParseException
   {
      FilterParser parser = new FilterParser();
      return parser.parse(selector, identifierMap, trace);
   }
}

PARSER_END(FilterParser)

/* IGNORE WHITESPACE */
   
SKIP :
{
    " "
  | "\r"
  | "\t"
  | "\f"
  | "\n"
}


/* RESERVED WORDS AND LITERALS */

TOKEN [IGNORE_CASE]:
{
    < TRUE:      "TRUE" >
  | < FALSE:     "FALSE" >
  | < NULL:      "NULL" >
  | < AND:       "AND" >
  | < NOT:       "NOT" >
  | < OR:        "OR" >
  | < BETWEEN:   "BETWEEN" >
  | < LIKE:      "LIKE" >
  | < IN:        "IN" >
  | < IS:        "IS" >
  | < ESCAPE:    "ESCAPE" >
  | < LPAREN:    "(" >
  | < RPAREN:    ")" >
  | < SEMICOLON: ";" >
  | < COMMA:     "," >

}

/* OPERATORS */

TOKEN :
{
    < MULT:  "*" >
  | < DIV:   "/" >
  | < MINUS: "-" >
  | < PLUS:  "+" >
  | < GT:    ">" >
  | < GE:    ">=" >
  | < LT:    "<" >
  | < LE:    "<=" >
  | < NE:    "<>" >
  | < EQ:    "=" >

}

/* Literals */

<DEFAULT> TOKEN : /* Numeric Literal */
{
   < INTEGER_LITERAL:
        "-9223372036854775808"
      | "-9223372036854775808l"
      | "-9223372036854775808L"
      | <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
   >
|
   < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
   < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
   < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
   < FLOATING_POINT_LITERAL:
      (["+","-"])? (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
   >
|
   < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
}


TOKEN :
{
   < SIMPLE_STRING:
      "'"
      (   (~["'","\n","\r"])
        | ("''")
      )*
      "'"
    >
}

/* Function names */

TOKEN : 
{
    < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
  |
    < #LETTER: [ "_","$", "a"-"z", "A"-"Z" ] >
  |
    < #DIGIT: ["0" - "9"] >
}

/** Start of the grammar */

Object expression() :
{
   Object exp1 = null;
}
{
   exp1=selectorExpression()<EOF>
   {
      return exp1;
   }
}

Object selectorExpression() :
{
   Object exp1 = null;
   Object exp2 = null;
}
{
   exp1=selectorTerm()
   (
       <OR> exp2=selectorTerm()
       {
          exp1 = new Operator(Operator.OR, exp1, exp2);
       }
   )*
   {
      return exp1;
   }
}

Object selectorTerm() :
{
   Object exp1 = null;
   Object exp2 = null;
}
{
   exp1=selectorFactor()
   (
       <AND> exp2=selectorFactor()
       {
          exp1 = new Operator(Operator.AND, exp1, exp2);
       }
   )*
   {
      return exp1;
   }
}

Object selectorFactor() :
{
   Object exp1 = null;
}
{
   exp1=conditionalExpression()
   {
      return exp1;
   }
 | <NOT> exp1=conditionalExpression()
   {
      exp1 = new Operator(Operator.NOT, exp1);
   }
   {
      return exp1;
   }
}

Object conditionalExpression() :
{
   Object exp1 = null;
}
{
   LOOKAHEAD(3)
   <LPAREN> exp1=selectorExpression() <RPAREN>
   {
      return exp1;
   }
 |
   exp1 = comparisonExpression()
   {
      return exp1;
   }
}

Object comparisonExpression() :
{
   int op = -1;
   Set set = null;
   Object exp1 = null;
   Object exp2 = null;
   Object exp3 = null;
   Object id = null;
   Token not = null;
}
{
   LOOKAHEAD(2147483647)
   exp1=identifier() <IS> [ not=<NOT> ] <NULL>
   {
      int opCode = not == null ? Operator.IS_NULL : Operator.IS_NOT_NULL;
      return new Operator(opCode, exp1);
   }
 |
   LOOKAHEAD(2147483647)
   id=identifier() [ not=<NOT> ] <IN> <LPAREN> { set = new HashSet<SimpleString>(); } stringList(set) <RPAREN>
   {
      if (not == null)
         return new Operator(Operator.IN, id, set);
      else
         return new Operator(Operator.NOT_IN, id, set);
      return exp1;
   }
 |
   LOOKAHEAD(2147483647)
   id=identifier() [ not=<NOT> ] <LIKE> exp1=patternExpression(id)
   {
      if (not != null)
         exp1 = new Operator(Operator.NOT, exp1);
      return exp1;
   }
 |
   LOOKAHEAD(2147483647)
   exp1=stringExpression()
   (
      <EQ>{ op = Operator.EQUAL;}
    | <NE>{ op = Operator.DIFFERENT;}
   ) exp2=stringExpression()
   {
      return new Operator(op, exp1, exp2);
   }
 |
   LOOKAHEAD(2147483647)
   exp1=booleanExpression()
   (
      <EQ>{ op = Operator.EQUAL;}
    | <NE>{ op = Operator.DIFFERENT;}
   ) exp2=booleanExpression()
   {
      return new Operator(op, exp1, exp2);
   }
 |
   LOOKAHEAD(2147483647)
   exp1=arithExpression() 
   (
      <EQ>{ op = Operator.EQUAL;}
    | <NE>{ op = Operator.DIFFERENT;}
    | <GT>{ op = Operator.GT;}
    | <GE>{ op = Operator.GE;}
    | <LT>{ op = Operator.LT;}
    | <LE>{ op = Operator.LE;}
   ) exp2=arithExpression()
   {
      return new Operator(op, exp1, exp2);
   }
 |
   LOOKAHEAD(2147483647)
   exp1=arithExpression() [ not=<NOT> ] <BETWEEN> exp2=arithExpression() <AND> exp3=arithExpression()
   {
      exp1 = new Operator(Operator.BETWEEN, exp1, exp2, exp3);
      if (not != null)
         exp1 = new Operator(Operator.NOT, exp1);
      return exp1;
   }
 | exp1=booleanExpression()
   {
      return exp1;
   }
}

void stringList(Set<SimpleString> set) :
{
}
{
   stringToken(set) ( <COMMA> stringToken(set))*
}

void stringToken(Set<SimpleString> set) :
{
   Token t = null;
}
{
   [ t=<SIMPLE_STRING> ]
   {
      if (t != null)
        set.add(stripQuotes(t.image));
   }
}

Object patternExpression(Object exp1) :
{
   Object exp2 = null;
   Token esc = null;
   Object escChar = null;
}
{
   exp2=stringLiteral() [ esc=<ESCAPE> escChar=stringLiteral() ]
   {
      Operator op = null;
      if (esc == null)
         op = new Operator(Operator.LIKE, exp1, exp2);
      else
         op = new Operator(Operator.LIKE_ESCAPE, exp1, exp2, escChar);
      return op;
   }
}

Object arithExpression() :
{
   Object exp1 = null;
   Object exp2 = null;
}
{
   exp1=arithTerm()
   (
       <PLUS> exp2=arithTerm()
       {
          exp1 = new Operator(Operator.ADD, exp1, exp2);
       }
     | <MINUS> exp2=arithTerm()
       {
          exp1 = new Operator(Operator.SUB, exp1, exp2);
       }
   )*
   {
      return exp1;
   }
}

Object arithTerm() :
{
   Object exp1 = null;
   Object exp2 = null;
}
{
   exp1=arithFactor()
   (
       <MULT> exp2=arithFactor()
       {
          exp1 = new Operator(Operator.MUL, exp1, exp2);
       }
     | <DIV> exp2=arithFactor()
       {
          exp1 = new Operator(Operator.DIV, exp1, exp2);
       }
   )*
   {
      return exp1;
   }
}

Object arithFactor() :
{
   Object exp1 = null;
   boolean negate = false;
}
{
   [<PLUS>|<MINUS>{ negate = true; }] exp1=numericExpression()
   {
      if (negate)
         exp1 = new Operator(Operator.NEG, exp1);
      return exp1;
   }
}

Object booleanExpression() :
{
   Object exp1 = null;
}
{
   (
      exp1=identifier()
    | exp1=booleanLiteral()
   )
   {
      return exp1;
   }
}

Object booleanLiteral() :
{
   boolean isTrue = true;
}
{
   (<TRUE>|<FALSE>{ isTrue = false; })
   {
      if (isTrue)
         return Boolean.TRUE;
      else
         return Boolean.FALSE;
   }
}

Object stringExpression() :
{
   Object exp1 = null;
}
{
   (
      exp1=identifier()
    | exp1=stringLiteral()
   )
   {
      return exp1;
   }
}

Object stringLiteral() :
{
   Token string = null;
}
{
   string=<SIMPLE_STRING>
   {
      return stripQuotes(string.image);
   }
}

Object numericExpression() :
{
   Object exp1 = null;
}
{
   (
      exp1 = numericLiteral()
    | (<LPAREN> exp1=arithExpression() <RPAREN>)
    | exp1 = identifier()
   )
   {
      return exp1;
   }
}
Object numericLiteral() :
{
   Token literal = null;
}
{
   literal=<FLOATING_POINT_LITERAL>
   {
      return Double.valueOf(literal.image);
   }
 |
   literal=<INTEGER_LITERAL>
   {
      String number = literal.image;

      // long suffix
      if (number.endsWith(LOFFER_L) || number.endsWith(UPPER_L))
      {
         // chop off the suffix
         return Long.valueOf(number.substring(0, number.length() - 1));
      }

      // hex
      if (number.startsWith(OX) || number.startsWith(Ox))
      {
         // handle literals from 0x8000000000000000L to 0xffffffffffffffffL:
         // remove sign bit, parse as positive, then calculate the negative
         // value with the sign bit
         if(number.length() == 18)
         {
            byte first = Byte.decode(number.substring(0, 3)).byteValue();
            if (first >= 8)
            {
               number = Ox + (first - 8) + number.substring(3);
               return Long.valueOf(Long.decode(number).longValue() - Long.MAX_VALUE - 1);
            }
         }
      }
      else if (number.startsWith(ZERRO))
      {  
         // octal
         // handle literals
         // from 01000000000000000000000L to 01777777777777777777777L
         // remove sign bit, parse as positive, then calculate the
         // negative value with the sign bit
         if (number.length() == 23)
         {
            if (number.charAt(1) == '1')
            {
               number = ZERRO + number.substring(2);
               return Long.valueOf(Long.decode(number).longValue() - Long.MAX_VALUE - 1);
            }
         }
      }
      return Long.decode(number);
   }
}

Object identifier() :
{
   Token id = null;
}
{
   id=<IDENTIFIER>
   {
      SimpleString simage = new SimpleString(id.image);
      Identifier identifier = identifierMap.get(simage);
      if (identifier == null)
      {
         identifier = new Identifier(simage);
         identifierMap.put(simage, identifier);
	   }
      return identifier;
   }
}
// CHECKSTYLE:ON
